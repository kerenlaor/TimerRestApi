/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package target.src.main.java.com.schemas.timerRest;

import target.src.main.java.com.schemas.modelRest.Error;
import target.src.main.java.com.schemas.modelRest.TimerCountdownResponse;
import target.src.main.java.com.schemas.modelRest.TimerRequest;
import target.src.main.java.com.schemas.modelRest.TimerResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import target.src.main.java.com.schemas.modelRest.TimerCountdownResponse;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-28T10:03:45.070482+02:00[Asia/Jerusalem]")
@Tag(name = "timer", description = "everything about timer countdown actions")
public interface ApiRest {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/timers : return parents information
     *
     * @return represents all timers information (status code 200)
     *         or The requested Timer wasn&#39;t found. (status code 404)
     *         or The requested Timer wasn&#39;t found. (status code 500)
     */
    @Operation(
        operationId = "getAllTimers",
        summary = "return parents information",
        tags = { "timer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "represents all timers information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimerResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested Timer wasn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "The requested Timer wasn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/timers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TimerResponse> getAllTimers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"timers\" : [ { \"hours\" : 1, \"seconds\" : 5, \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"minutes\" : 5, \"id\" : \"id\", \"timeLeft\" : 2, \"webhookUrl\" : \"webhookUrl\", \"status\" : \"Started\" }, { \"hours\" : 1, \"seconds\" : 5, \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"minutes\" : 5, \"id\" : \"id\", \"timeLeft\" : 2, \"webhookUrl\" : \"webhookUrl\", \"status\" : \"Started\" } ], \"pageNumber\" : 0, \"pageSize\" : 6, \"totalRowCount\" : 7 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"msg\", \"status_code\" : 9 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"msg\", \"status_code\" : 9 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/timers/{id} : Get number of seconds remaining in timer.
     * number of seconds remaining in a timer
     *
     * @param id Timer identifier (required)
     * @return represents timer countdown seconds left by id (status code 200)
     *         or The requested Timer wasn&#39;t found. (status code 404)
     *         or The requested Timer wasn&#39;t found. (status code 500)
     */
    @Operation(
        operationId = "getTimerCountdownById",
        summary = "Get number of seconds remaining in timer.",
        description = "number of seconds remaining in a timer",
        tags = { "timer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "represents timer countdown seconds left by id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimerCountdownResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested Timer wasn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "The requested Timer wasn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/timers/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TimerCountdownResponse> getTimerCountdownById(
        @Parameter(name = "id", description = "Timer identifier", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numberOfSecondsLeft\" : 0, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"msg\", \"status_code\" : 9 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"msg\", \"status_code\" : 9 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/timers/outpost : post new timer request
     * this action post a new timer request
     *
     * @param timerRequest  (optional)
     * @return posting new timer (status code 200)
     *         or The requested Timer wasn&#39;t found. (status code 404)
     *         or The requested Timer wasn&#39;t found. (status code 500)
     */
    @Operation(
        operationId = "startNewTimerCountdown",
        summary = "post new timer request",
        description = "this action post a new timer request",
        tags = { "timer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "posting new timer", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimerCountdownResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested Timer wasn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "The requested Timer wasn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/timers/outpost",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TimerCountdownResponse> startNewTimerCountdown(
        @Parameter(name = "TimerRequest", description = "") @RequestBody(required = false) TimerRequest timerRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numberOfSecondsLeft\" : 0, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"msg\", \"status_code\" : 9 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"msg\", \"status_code\" : 9 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
